name: 🚀 IaC Testing Framework CI/CD Demo

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  iac-testing:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v3
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install checkov tflint-wrapper
        
    - name: 🔍 Run Static Analysis
      run: |
        python comprehensive_runner.py static ./static_analysis/examples
        
    - name: 🔐 Run Policy Compliance
      run: |
        python comprehensive_runner.py policy ./static_analysis/examples
        
    - name: 🚀 Run Dynamic Testing (LocalStack)
      run: |
        # Install LocalStack
        pip install localstack
        docker pull localstack/localstack
        
        # Start LocalStack in background
        localstack start -d
        
        # Wait for LocalStack to be ready
        sleep 30
        
        # Run dynamic tests
        python comprehensive_runner.py dynamic ./static_analysis/examples/sample --environment localstack
        
    - name: 📊 Generate CI/CD Reports
      run: |
        python -c "
        from ci_cd.ci_integration import CICDIntegration
        ci = CICDIntegration('github_actions')
        
        # Set status annotations
        ci.set_notice('IaC Testing Framework completed successfully')
        ci.set_warning('Some policy compliance issues found')
        
        # Generate reports
        results = {'summary': {'overall_status': 'PASSED'}}
        ci.save_results_for_reporting(results, 'artifacts')
        "
        
    - name: 📤 Upload Test Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: iac-test-reports
        path: |
          artifacts/
          detailed_*.txt
          
    - name: 💬 Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('artifacts/summary.md')) {
            const summary = fs.readFileSync('artifacts/summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
