name: IaC Testing Framework CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_DEFAULT_REGION: us-east-1
  TERRAFORM_VERSION: 1.0.0

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Install TFLint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        
    - name: Install Checkov
      run: |
        pip install checkov
        
    - name: Run Static Analysis
      run: |
        python test_runner.py static static_analysis/examples --output reports/static_analysis_results.json
        
    - name: Upload Static Analysis Results
      uses: actions/upload-artifact@v3
      with:
        name: static-analysis-results
        path: reports/static_analysis_results.json

  policy-compliance:
    name: Policy Compliance
    runs-on: ubuntu-latest
    needs: static-analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Policy Compliance Checks
      run: |
        python test_runner.py policy static_analysis/examples --output reports/policy_compliance_results.json
        
    - name: Upload Policy Compliance Results
      uses: actions/upload-artifact@v3
      with:
        name: policy-compliance-results
        path: reports/policy_compliance_results.json

  dynamic-testing:
    name: Dynamic Testing with LocalStack
    runs-on: ubuntu-latest
    needs: [static-analysis, policy-compliance]
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,ec2,iam,vpc
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
          DOCKER_HOST: unix:///var/run/docker.sock
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install boto3 localstack-client
        
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Wait for LocalStack
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
        
    - name: Configure AWS CLI for LocalStack
      run: |
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1
        
    - name: Run Dynamic Tests
      env:
        AWS_ENDPOINT_URL: http://localhost:4566
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
      run: |
        python dynamic_provisioning/dynamic_tester.py
        
    - name: Upload Dynamic Test Results
      uses: actions/upload-artifact@v3
      with:
        name: dynamic-test-results
        path: reports/dynamic_test_results.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [static-analysis, policy-compliance, dynamic-testing]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Run Combined Analysis
      run: |
        python test_runner.py combined static_analysis/examples --output reports/combined_results.json
        
    - name: Run Unit Tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Generate Test Report
      run: |
        python generate_test_report.py
        
    - name: Upload Combined Results
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-results
        path: |
          reports/combined_results.json
          reports/test_report.html

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.integration-tests.result == 'success' }}
      run: |
        echo "✅ All IaC tests passed successfully!"
        
    - name: Notify Failure
      if: ${{ needs.integration-tests.result == 'failure' }}
      run: |
        echo "❌ IaC tests failed. Please check the results."
        exit 1
